
@{
    ViewData["Title"] = "DIARY_Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div id="write_app">
    <v-app id="write">
        <v-content>
            <v-container fluid>
                <v-layout row>
                    <v-flex xs6>
                        <v-date-picker v-model="picker" :landscape="true" :picker-date.sync="picker" ></v-date-picker>
                    </v-flex>
                    <v-layout column>
                        <v-flex xs12>
                            <v-text-field label="Title" v-model=diary_title box></v-text-field>
                            <v-text-field label="天氣" v-model=weather box></v-text-field>
                            <v-textarea outline name="diary" label="隨手記" placeholder="在想些甚麼..." v-model=diary_text></v-textarea>
                            <v-layout justify-end row>
                                <v-btn color="primary" v-on:click.native="Insert_DIARY">寫日記</v-btn>
                            </v-layout>
                        </v-flex>
                    </v-layout>
                </v-layout>
            </v-container>
        </v-content>
    </v-app>
</div>

<div id="card_app">
    <v-app id="card">
        <v-content>
            <v-container fluid>
                <v-layout row>
                    <v-flex xs6>
                        <v-text-field label="想看哪一天的日記?" v-model="SEARCH_DATE" placeholder="YYYY-MM-DD" box></v-text-field>
                        @*<v-menu :close-on-content-click="false" v-model="date_menu" :nudge-right="40" lazy transition="scale-transition" offset-y full-width min-width="290px">
                            <v-text-field slot="activator" v-model="SEARCH_DATE" label="想要看哪一天?" prepend-icon="event" placeholder="YYYY-MM-DD"></v-text-field>
                            <v-date-picker v-model="SEARCH_DATE" v-on:input="date_menu = false"></v-date-picker>
                        </v-menu>*@
                    </v-flex>
                    <v-btn color="success" v-on:click.native="Get_DIARY" id="btn_query">查詢</v-btn>
                </v-layout>
                <v-layout>
                    <v-expansion-panel v-model="panel" expand>
                        <v-expansion-panel-content v-for="(item, key, index) in filter_card_text" :key="index" v-bind:todo="item">
                            <div slot="header"><b>{{item.DIARY_DATE}} &nbsp;&nbsp; {{item.WEATHER==null ? "" : "("+item.WEATHER+")"}}&nbsp;&nbsp;</b></br> &nbsp;&nbsp;{{item.DIARY_TITLE}}</div>
                            @*<v-text-field v-show=modify_show label="Title" v-model=diary_title box>{{item.DIARY_TITLE}}</v-text-field>*@ @*//Title先不給修改*@

                            <v-card round>
                                <v-card-text v-show=!modify_show>{{item.DIARY_TEXT}}</v-card-text>
                                <v-textarea v-show=modify_show outline name="diary" label="日記修改" v-model=diary_text>{{item.DIARY_TEXT}}</v-textarea>
                                <v-btn v-show=!modify_show color="warning" v-on:click.native="Modify_LAYOUT($event,item)">修改</v-btn>
                                <v-btn v-show=modify_show color="warning" v-on:click.native="Modify_DIARY($event,item)">送出修改</v-btn>
                                @*<v-btn color="error" v-on:click.native="  Delete_DIARY($event,item)">刪除</v-btn>*@ @*後續為了做出跳窗這段就註解了*@
                                <v-dialog v-model="dialog" width="500">
                                    <v-btn slot="activator" color="error" v-on:click.native="Delete_CHECK(item)">刪除</v-btn>
                                    <v-card>
                                        <v-card-title class="headline grey lighten-2" primary-title>Waning</v-card-title>
                                        <v-card-text>確定要刪除這篇日記?</v-card-text>
                                        <v-divider></v-divider>
                                        <v-card-actions>
                                            <v-spacer></v-spacer>
                                            <v-btn color="primary" flat v-on:click.native="Delete_DIARY($event,item)">確定刪除</v-btn>
                                        </v-card-actions>
                                    </v-card>
                                </v-dialog>
                            </v-card>
                        </v-expansion-panel-content>
                    </v-expansion-panel>
                </v-layout>
            </v-container>
        </v-content>
    </v-app>
</div>

<script>

    //建立日記App
    new Vue({
        el: '#write',
        data: {
            picker: convDateToStr(new Date()), //日期picker預設當天日期
            diary_text: "",
            diary_title: "",
            weather:"",
        },
        methods:
        {
            //1. 建立日記
            Insert_DIARY: function () {
                //送出POST請求
                this.$http.post('http://localhost/Practice_dvp/DIARY/Insert_DIARY2', { DIARY_TITLE: this.diary_title, DIARY_TEXT: this.diary_text, USER_ID: $.cookie("USER_ID"), DIARY_DATE: this.picker, WEATHER: this.weather }, { emulateJSON: true }).then(this.Insert_successCallback, this.errorCallback);
            },

            //2. 建立日記成功後要做的動作
            Insert_successCallback: function (res) {
                //建立日記完成後清空輸入框
                this.diary_title = "";
                this.diary_text = "";

                $("#btn_query").click(); //重新查詢
            },

            //3. 抓Yahoo天氣
            Get_weather: function () {
                //宣告api的網址與sql
                var sql = 'select * from weather.forecast where woeid in (select woeid from geo.places(1) where text="taipei") and u="c"';
                var url = "https://query.yahooapis.com/v1/public/yql?q=" + sql + '&format=json';

                //用get的方式抓取Yahoo天氣資料
                this.$http.get(url)
                    .then(this.Get_weather_successCallback, this.Get_weather_errorCallback);
            },

            //4. 抓到Yahoo天氣資料之後要做的事情
            Get_weather_successCallback: function (res) {

                //抓出未來10天的天氣
                var forecast = res.body.query.results.channel.item.forecast;

                //先抓出user挑選的日期並轉換成日期格式
                var picker_date = new Date(this.picker);
                var picker = this.picker;

                //僅回傳user選取到的那天的天氣
                var day_weather = $.grep(forecast, function (item, index) {

                    //轉換成日期之後再轉成想要的字串格式
                    var date = new Date(item.date);
                    var date_str = convDateToStr(date);

                    //若是User挑選的日期則回傳true
                    if (date_str == picker) { return true;}
                    
                });

                //將天氣塞入text field
                if (day_weather.length > 0) {
                    this.weather = day_weather[0].text;
                }
                else { this.weather = ""; }
            }
        },
        watch: //監看
        {
            //若日期有改變則去抓天氣的資料
            picker(current, prev) {
                this.Get_weather();
            }
        },
        mounted: //mount後立即執行抓天氣
            function () { this.Get_weather(); }
    })


    //展出與修改日記
    new Vue({
        el: '#card',
        data: {
            card_text: [],      //所有日記的集合
            SEARCH_DATE: convDateToStr(new Date()), //要用來當作查詢條件的欄位，先預設當天
            diary_title: "",    //修改日記的title, 不過這邊沒用上
            diary_text: "",     //修改日記內容
            diary_id:"",        //用來暫時存放日記的ID
            modify_show: false, //判斷是否已按下修改按鈕
            dialog: false,      //判斷是否要顯示dialog
            panel: [],          //用來全部收合expand panel
            date_menu: false
        },
        props: ['todo'], //用來新增的屬性，原本是為了存放item，但是其實用不上
        methods:
        {
            //1. 抓取日記
            Get_DIARY: function () {
                //送出POST請求
                this.$http.post('http://localhost/Practice_dvp/DIARY/Get_DIARY2', { SEARCH_DATE: this.SEARCH_DATE, USER_ID: $.cookie("USER_ID") }, { emulateJSON: true }).then(this.Get_successCallback, this.errorCallback);
            },

            //2. 按下修改按鈕之後要做的動作
            Modify_LAYOUT: function (event, item) {
                //this.diary_title = item.DIARY_TITLE //將文字帶到text field中
                this.diary_text = item.DIARY_TEXT; //將文字帶到text area中
                this.modify_show = !this.modify_show; //toggle 修改時要顯示或隱藏的元件
            },

            //3. 修改日記
            Modify_DIARY: function (event, item) {
                this.modify_show = !this.modify_show; //toggle 修改時要顯示或隱藏的元件
                item.DIARY_TEXT = this.diary_text;
                //送出POST請求
                this.$http.post('http://localhost/Practice_dvp/DIARY/Modify_DIARY2', item, { emulateJSON: true }).then(this.Modify_successCallback, this.errorCallback);
            },

            //4. 刪除日記
            Delete_DIARY: function (event, item) {
                this.dialog = false;
                //送出POST請求
                this.$http.post('http://localhost/Practice_dvp/DIARY/Delete_DIARY2', { DIARY_ID: this.diary_id, USER_ID: $.cookie("USER_ID") }, { emulateJSON: true }).then(this.Insert_successCallback, this.errorCallback);
            },

            //5. 抓取日記成功後要做的動作
            Get_successCallback: function (res) {
                //將回傳的Json字串轉為Object
                var get_result = $.parseJSON(res.bodyText);
                console.log("success");

                //把Object綁訂到card_text上
                this.card_text = $.makeArray(get_result.rtn);

                //收合所有Panel
                this.close_panel();
            },

            //6. 修改日記成功後要做的動作
            Modify_successCallback: function (res) {

                console.log("success");
            },

            //7. 刪除日記成功後要做的動作
            Insert_successCallback: function (res) {
                $("#btn_query").click(); //重新查詢
            },

            //8. 展開所有Panel
            expand_panel() {
                this.panel = [...Array(this.items).keys()].map(_ => true)
            },

            //9. 閉合所有Panel
            close_panel() {
                this.panel = []
            },

            //10. 按下第一個DELETE按鈕時，要先記住DIARY_ID (之所以要這個function去紀錄ID，是因為沒辦法直接讓dialog裡面的按鈕正常接收到expand panel中的item)
            Delete_CHECK: function (item) { this.diary_id = item.DIARY_ID; },

            //發生錯誤時log error
            errorCallback: function (res) {
                console.log("error");
            }
        },
        computed: {
            //1. 回傳filter過後的日記
            filter_card_text: function () {

                //準備變數
                var search_date = this.SEARCH_DATE;
                var card_text = this.card_text;
                var card_text_tmp = [];

                //如果搜尋日期為空，則不做任何過濾
                if (search_date == "")
                { card_text_tmp = card_text; }
                else {
                    //利用array的filter功能，由判斷式回傳true or false來決定每一筆資料是否要留下
                    var card_text_tmp = card_text.filter(function (item) {
                        return item.DIARY_DATE.indexOf(search_date)>=0; //只要包含到字串就會回傳>=0的數字，否則會回傳-1
                    });}
                
                return card_text_tmp;
            },
        }
    });

    //日期轉字串
    function convDateToStr(dateObj) {
        var year = dateObj.getFullYear();

        if (dateObj.getMonth() + 1 > 9) { var month = dateObj.getMonth() + 1; }
        else {
            var month = dateObj.getMonth() + 1;
            month = "0" + month;
        }
        if (dateObj.getDate() > 9) { var date = dateObj.getDate(); }
        else {
            var date = dateObj.getDate();
            date = "0" + date;
        }

        var hour = dateObj.getHours();
        var minute = dateObj.getMinutes();
        var second = dateObj.getSeconds();

        return year + "-" + month + "-" + date;
    }

</script>

